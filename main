
<html><head><base href="https://raw.githubusercontent.com">
<style>
  body { 
    font-family: 'Orbitron', 'Roboto Mono', monospace; 
    padding: 20px; 
    background: #0F1116;
    color: #FF9D00;
  }
  .calculator { 
    max-width: 800px; 
    margin: 0 auto; 
    background: linear-gradient(145deg, #1C2128, #232930);
    padding: 40px; 
    border-radius: 15px;
    position: relative;
    border: 20px solid #2D3436;
    box-shadow: 
      inset 0 0 20px rgba(0,0,0,0.5),
      0 0 30px rgba(255, 157, 0, 0.3);
  }
  
  .screw {
    width: 20px;
    height: 20px;
    position: absolute;
    background: linear-gradient(45deg, #888, #666);
    border-radius: 50%;
    box-shadow: inset -2px -2px 4px rgba(0,0,0,0.4);
  }
  .screw::after {
    content: '+';
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    color: #444;
    font-size: 14px;
    font-family: monospace;
  }
  .screw-tl { top: 10px; left: 10px; }
  .screw-tr { top: 10px; right: 10px; }
  .screw-bl { bottom: 10px; left: 10px; }
  .screw-br { bottom: 10px; right: 10px; }

  .input-group { 
    margin: 15px 0;
    background: #2D333B;
    padding: 15px;
    border-radius: 8px;
    border: 2px solid #FF9D00;
    position: relative;
  }
  
  .led {
    width: 12px;
    height: 12px;
    border-radius: 50%;
    position: absolute;
    right: 10px;
    top: 50%;
    transform: translateY(-50%);
    background: #333;
    box-shadow: inset -1px -1px 3px rgba(0,0,0,0.5);
    transition: all 0.3s ease;
  }
  .led.active {
    background: #00FF00;
    box-shadow: 
      0 0 5px #00FF00,
      0 0 10px #00FF00;
  }

  label { 
    display: block; 
    margin-bottom: 5px;
    color: #FF9D00;
    text-transform: uppercase;
    font-size: 0.9em;
    letter-spacing: 1px;
    font-family: 'Share Tech Mono', monospace; 
  }
  
  input { 
    width: 150px; 
    padding: 12px; 
    background: #1C2128;
    border: 1px solid #FF9D00;
    color: #FF9D00; 
    border-radius: 4px;
    font-family: 'Share Tech Mono', monospace; 
    font-size: 1.1em; 
    letter-spacing: 1px;
  }
  
  button { 
    background: linear-gradient(145deg, #FF9D00, #FF8500);
    color: #0F1116;
    padding: 15px 30px;
    border: none;
    border-radius: 8px;
    cursor: pointer;
    font-weight: bold;
    text-transform: uppercase;
    transition: all 0.3s ease;
    box-shadow: 0 4px 15px rgba(255, 157, 0, 0.3);
    margin: 5px;
    font-family: 'Share Tech Mono', monospace; 
    letter-spacing: 1px;
  }
  
  button:hover { 
    background: linear-gradient(145deg, #FFB84D, #FFA94D);
    transform: translateY(-2px);
    box-shadow: 0 6px 20px rgba(255, 157, 0, 0.4);
  }

  #result { 
    margin-top: 20px;
    padding: 20px;
    border: 2px solid #FF9D00;
    border-radius: 8px;
    background: #1C2128;
    font-family: 'Share Tech Mono', monospace; 
    position: relative;
    box-shadow: inset 0 0 20px rgba(0,0,0,0.3);
    font-size: 1.1em; 
    line-height: 1.6; 
    letter-spacing: 1px;
  }

  .diagram { 
    margin-top: 20px; 
    padding: 20px; 
    background: #1C2128;
    border-radius: 8px;
    border: 2px solid #FF9D00;
    box-shadow: inset 0 0 20px rgba(0,0,0,0.3);
  }

  .splitter { 
    fill: #FF9D00;
    filter: drop-shadow(0 0 2px rgba(255, 157, 0, 0.5));
  }

  .flow-path { 
    stroke: #FF9D00;
    stroke-width: 2;
  }

  .flow-text { 
    fill: #fffa28;
    font-size: 20px;
    font-family: 'Share Tech Mono', monospace; 
  }

  h2 {
    color: #FF9D00;
    text-align: center;
    text-transform: uppercase;
    letter-spacing: 2px;
    margin-bottom: 30px;
    text-shadow: 0 0 10px rgba(255, 157, 0, 0.3);
    font-family: 'Orbitron', sans-serif; 
    font-size: 1.8em;
  }

  h3 {
    color: #FF9D00;
    border-bottom: 2px solid #FF9D00;
    padding-bottom: 5px;
    font-family: 'Share Tech Mono', monospace; 
    letter-spacing: 1.5px;
  }

  .button-group {
    display: flex;
    justify-content: center;
    gap: 10px;
    margin: 20px 0;
  }
</style>
<link href="https://fonts.googleapis.com/css2?family=Orbitron:wght@400;700&family=Share+Tech+Mono&display=swap" rel="stylesheet">
</head><body>
<div class="calculator">
  <div class="screw screw-tl"></div>
  <div class="screw screw-tr"></div>
  <div class="screw screw-bl"></div>
  <div class="screw screw-br"></div>
  
  <h2>Calculateur de Séparateurs Satisfactory - Multi-flux</h2>
  
  <div class="input-group">
    <label>Flux Total (items/min)</label>
    <input type="number" id="totalFlow" value="95.808" step="0.001">
    <div class="led" id="ledTotal"></div>
  </div>
  
  <div class="input-group">
    <label>Flux Désiré #1 (items/min)</label>
    <input type="number" id="targetFlow1" value="20.48" step="0.001">
    <div class="led" id="led1"></div>
  </div>

  <div class="input-group">
    <label>Flux Désiré #2 (items/min)</label>
    <input type="number" id="targetFlow2" value="67.46" step="0.001">
    <div class="led" id="led2"></div>
  </div>

  <div class="input-group">
    <label>Flux Désiré #3 (items/min)</label>
    <input type="number" id="targetFlow3" value="7.87" step="0.001">
    <div class="led" id="led3"></div>
  </div>
  
  <div class="button-group">
    <button onclick="calculateSplitters('123')">Ordre: 1 → 2 → 3</button>
    <button onclick="calculateSplitters('132')">Ordre: 1 → 3 → 2</button>
    <button onclick="calculateSplitters('213')">Ordre: 2 → 1 → 3</button>
  </div>
  
  <div id="result"></div>
  <div id="diagram" class="diagram"></div>
</div>

<script>
function calculateSplitterChain(totalFlow, targetFlow) {
    let currentFlow = totalFlow;
    let achievedFlow = 0;
    let steps = [];
    let precision = 0.1;
    
    while (Math.abs(achievedFlow - targetFlow) > precision && steps.length < 10) {
        if (achievedFlow < targetFlow) {
            if (currentFlow/2 > (targetFlow - achievedFlow)) {
                currentFlow = currentFlow/3;
                steps.push({type: 3, value: currentFlow});
            } else {
                currentFlow = currentFlow/2;
                steps.push({type: 2, value: currentFlow});
            }
            achievedFlow += currentFlow;
        } else {
            currentFlow = currentFlow/3;
            steps.push({type: 3, value: -currentFlow});
            achievedFlow -= currentFlow;
        }
    }
    
    return {steps, achievedFlow};
}

function updateLEDs(totalFlow, flow1, flow2, flow3) {
    document.getElementById('ledTotal').classList.toggle('active', totalFlow > 0);
    document.getElementById('led1').classList.toggle('active', flow1 > 0);
    document.getElementById('led2').classList.toggle('active', flow2 > 0);
    document.getElementById('led3').classList.toggle('active', flow3 > 0);
}

function calculateSplitters(order = '123') {
    const totalFlow = parseFloat(document.getElementById('totalFlow').value);
    const flows = {
        '1': parseFloat(document.getElementById('targetFlow1').value),
        '2': parseFloat(document.getElementById('targetFlow2').value),
        '3': parseFloat(document.getElementById('targetFlow3').value)
    };
    
    let remainingFlow = totalFlow;
    let results = [];
    let achievedFlows = {};
    
    for (let i = 0; i < 2; i++) {
        const currentTarget = flows[order[i]];
        const result = calculateSplitterChain(remainingFlow, currentTarget);
        results.push(result);
        achievedFlows[order[i]] = result.achievedFlow;
        remainingFlow -= result.achievedFlow;
    }
    
    achievedFlows[order[2]] = remainingFlow;
    
    updateLEDs(totalFlow, 
               achievedFlows['1'], 
               achievedFlows['2'], 
               achievedFlows['3']);
    
    const resultDiv = document.getElementById('result');
    resultDiv.innerHTML = `
        <h3>Résultats:</h3>
        <p>Flux total: ${totalFlow} items/min</p>
        <p>Flux #1: ${achievedFlows['1'].toFixed(2)} / ${flows['1']} items/min (Écart: ${Math.abs(achievedFlows['1'] - flows['1']).toFixed(2)})</p>
        <p>Flux #2: ${achievedFlows['2'].toFixed(2)} / ${flows['2']} items/min (Écart: ${Math.abs(achievedFlows['2'] - flows['2']).toFixed(2)})</p>
        <p>Flux #3: ${achievedFlows['3'].toFixed(2)} / ${flows['3']} items/min (Écart: ${Math.abs(achievedFlows['3'] - flows['3']).toFixed(2)})</p>
        <p>Ordre de calcul: ${order[0]} → ${order[1]} → ${order[2]}</p>
    `;
    
    generateMultiDiagram(results[0].steps, results[1].steps, totalFlow, 
                        achievedFlows[order[0]], achievedFlows[order[1]], achievedFlows[order[2]]);
}

function generateMultiDiagram(steps1, steps2, totalFlow, achievedFlow1, achievedFlow2, finalFlow) {
    const totalHeight = 200 + Math.max(steps1.length, steps2.length) * 80;
    
    const svg = `
    <svg width="900" height="${totalHeight}" viewBox="0 0 900 ${totalHeight}">
        <defs>
            <marker id="arrowhead" markerWidth="10" markerHeight="7" 
            refX="9" refY="3.5" orient="auto">
                <polygon points="0 0, 10 3.5, 0 7" fill="#FF9D00"/>
            </marker>
        </defs>
        
        <line x1="50" y1="50" x2="150" y2="50" class="flow-path" marker-end="url(#arrowhead)"/>
        <text x="60" y="40" class="flow-text">${totalFlow}</text>
        
        ${steps1.map((step, i) => `
            <rect x="150" y="${50 + i*60}" width="40" height="40" class="splitter"/>
            <text x="160" y="${75 + i*60}" class="flow-text">1/${step.type}</text>
            <line x1="190" y1="${70 + i*60}" x2="290" y2="${70 + i*60}" 
            class="flow-path" marker-end="url(#arrowhead)"/>
            <text x="200" y="${65 + i*60}" class="flow-text">
                ${Math.abs(step.value).toFixed(1)}
            </text>
        `).join('')}
        
        ${steps2.map((step, i) => `
            <rect x="450" y="${50 + i*60}" width="40" height="40" class="splitter"/>
            <text x="460" y="${75 + i*60}" class="flow-text">1/${step.type}</text>
            <line x1="490" y1="${70 + i*60}" x2="590" y2="${70 + i*60}" 
            class="flow-path" marker-end="url(#arrowhead)"/>
            <text x="500" y="${65 + i*60}" class="flow-text">
                ${Math.abs(step.value).toFixed(1)}
            </text>
        `).join('')}
        
        <text x="300" y="30" class="flow-text">Flux #1: ${achievedFlow1.toFixed(1)}</text>
        <text x="600" y="30" class="flow-text">Flux #2: ${achievedFlow2.toFixed(1)}</text>
        <text x="600" y="${totalHeight - 30}" class="flow-text">Flux #3: ${finalFlow.toFixed(1)}</text>
    </svg>
    `;
    
    document.getElementById('diagram').innerHTML = svg;
}

calculateSplitters();
</script>
</body></html>
